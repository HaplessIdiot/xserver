meson.build:xf86driproto_dep = dependency('xf86driproto', version: '>= 2.1.0', fallback: ['xorgproto', 'ext_xorgproto'], required: get_option('dri1') == 'true')
meson.build:dri2proto_dep = dependency('dri2proto', version: '>= 2.8', fallback: ['xorgproto', 'ext_xorgproto'], required: get_option('dri2') == 'true')
meson.build:dri3proto_dep = dependency('dri3proto', version: '>= 1.4', fallback: ['xorgproto', 'ext_xorgproto'], required: get_option('dri3') == 'true')
meson.build:xf86bigfontproto_dep = dependency('xf86bigfontproto', version: '>= 1.2.0', fallback: ['xorgproto', 'ext_xorgproto'], required: get_option('xf86bigfont'))
meson.build:dpmsproto_dep = dependency('dpmsproto', version: '>= 1.2', required: get_option('dpms'))
meson.build:dbus_required = get_option('systemd_logind') == 'true'
meson.build:build_systemd = get_option('systemd_notify') == 'true'
meson.build:xkb_dir = get_option('xkb_dir')
meson.build:        xkb_dir = join_paths(get_option('prefix'), 'share/X11/xkb')
meson.build:xkb_output_dir = get_option('xkb_output_dir')
meson.build:xkb_bin_dir = get_option('xkb_bin_dir')
meson.build:        xkb_bin_dir = join_paths(get_option('prefix'), get_option('bindir'))
meson.build:dfp = get_option('default_font_path')
meson.build:    fontrootdir = get_option('fontrootdir')
meson.build:            fontrootdir = join_paths(get_option('prefix'), get_option('datadir'), 'fonts', 'X11')
meson.build:glamor_option = get_option('glamor')
meson.build:hal_option = get_option('hal')
meson.build:udev_option = get_option('udev')
meson.build:udev_kms_option = get_option('udev_kms')
meson.build:if get_option('systemd_logind') == 'auto'
meson.build:    build_systemd_logind = get_option('systemd_logind') == 'true'
meson.build:with_dtrace = get_option('dtrace')
meson.build:    if get_option('xorg') == 'auto'
meson.build:        build_xorg = get_option('xorg') == 'true'
meson.build:xorgsdkdir = join_paths(get_option('prefix'), get_option('includedir'), 'xorg')
meson.build:build_xnest = get_option('xnest') != 'false'
meson.build:if get_option('xwin') == 'auto'
meson.build:    build_xwin = get_option('xwin') == 'true'
meson.build:if get_option('xquartz') == 'auto'
meson.build:    build_xquartz = get_option('xquartz') == 'true'
meson.build:build_xvfb = get_option('xvfb')
meson.build:if get_option('ipv6') == 'auto'
meson.build:    build_ipv6 = get_option('ipv6') == 'true'
meson.build:int10 = get_option('int10')
meson.build:log_dir = get_option('log_dir')
meson.build:    log_dir = join_paths(get_option('prefix'), get_option('localstatedir'), 'log')
meson.build:module_dir = join_paths(get_option('libdir'), get_option('module_dir'))
meson.build:if get_option('sha1') != 'auto'
meson.build:    test_sha1 = [get_option('sha1')]
meson.build:    if get_option('sha1') != 'auto'
meson.build:        error('@0@ SHA1 requested, but not found'.format(get_option('sha1')))
meson.build:if get_option('xdmcp')
meson.build:has_xdm_auth = get_option('xdm-auth-1')
meson.build:build_glx = get_option('glx')
meson.build:if get_option('dri1') == 'auto'
meson.build:    build_dri1 = get_option('dri1') == 'true'
meson.build:if get_option('dri2') == 'auto'
meson.build:    build_dri2 = get_option('dri2') == 'true'
meson.build:if get_option('dri3') == 'auto'
meson.build:    build_dri3 = get_option('dri3') == 'true'
meson.build:libdrm_required = (build_dri1 or build_dri2 or build_dri3) and get_option('drm') == true
meson.build:if get_option('vgahw') == 'auto'
meson.build:    build_vgahw = get_option('vgahw') == 'true'
meson.build:build_dpms = get_option('dpms')
meson.build:build_xf86bigfont = get_option('xf86bigfont')
meson.build:build_screensaver = get_option('screensaver')
meson.build:build_res = get_option('xres')
meson.build:build_xinerama = get_option('xinerama')
meson.build:build_xsecurity = get_option('xcsecurity')
meson.build:build_namespace = get_option('namespace')
meson.build:build_xv = get_option('xv')
meson.build:build_xvmc = get_option('xvmc')
meson.build:if get_option('dga') == 'auto'
meson.build:elif get_option('dga') == 'true'
meson.build:if (get_option('linux_apm') == true and
meson.build:if (get_option('linux_acpi') == true and
meson.build:if get_option('mitshm') == 'auto'
meson.build:elif get_option('mitshm') == 'true'
meson.build:if get_option('xselinux') != 'false'
meson.build:			     required: get_option('xselinux') == 'true')
meson.build:    dep_audit = dependency('audit', required: get_option('xselinux') == 'true')
meson.build:    if get_option('xselinux') == 'true'
meson.build:if get_option('libunwind')
meson.build:serverconfigdir = get_option('serverconfigdir')
meson.build:    serverconfigdir = join_paths(get_option('prefix'), get_option('libdir'), 'xorg')
meson.build:require_docs = get_option('docs') == 'true'
meson.build:require_devel_docs = get_option('devel-docs') == 'true'
meson.build:require_docs_pdf = (require_docs or require_devel_docs) and get_option('docs-pdf') == 'true'
meson.build:build_docs = (get_option('docs') != 'false' and
meson.build:build_docs_devel = (get_option('devel-docs') != 'false' and
meson.build:build_docs_pdf = (get_option('docs-pdf') != 'false' and
meson.build:if build_xorg or get_option('xephyr')
meson.build:option('builtin_amdgpu', type: 'boolean', value: true, description: 'Link amdgpu driver directly into XLibre binary')
meson.build:if build_xorg and get_option('builtin_amdgpu')
meson.build:build_tests = get_option('tests') and host_machine.system() != 'windows'
meson.build:    sdkconfig.set('prefix', get_option('prefix'))
meson.build:    sdkconfig.set('libdir', join_paths('${exec_prefix}', get_option('libdir')))
meson.build:    sdkconfig.set('includedir', join_paths('${prefix}', get_option('includedir')))
meson.build:    sdkconfig.set('datarootdir', join_paths('${prefix}', get_option('datadir')))
meson.build:    sdkconfig.set('sdkdir', join_paths('${prefix}', get_option('includedir'), 'xorg'))
meson.build:        install_dir: join_paths(get_option('prefix'),
meson.build:                                get_option('libdir'),
meson.build:                 install_dir: join_paths(get_option('datadir'), 'aclocal'))
meson.build:if build_xorg and get_option('builtin_amdgpu')
config/meson.build:                 install_dir: join_paths(get_option('datadir'), 'X11/xorg.conf.d'))
hw/kdrive/meson.build:build_xephyr = get_option('xephyr')
hw/xfree86/drivers/input/meson.build:if get_option('xf86-input-inputtest')
hw/xfree86/drivers/video/meson.build:if get_option('xf86-video-amdgpu')
doc/dtrace/meson.build:        install_dir: join_paths(get_option('datadir'), 'doc/xorg-server'),
doc/dtrace/meson.build:                install_dir: join_paths(get_option('datadir'), 'doc/xorg-server'),
doc/dtrace/meson.build:            install_dir: join_paths(get_option('datadir'), 'doc/xorg-server'),
hw/xfree86/os-support/meson.build:if get_option('pciaccess')
hw/xfree86/os-support/meson.build:if get_option('agp') == 'auto'
hw/xfree86/os-support/meson.build:    build_agp = get_option('agp') == 'true'
hw/xfree86/parser/meson.build:        '-DDATADIR="' + join_paths(get_option('prefix'), get_option('datadir')) + '"',
hw/xfree86/meson.build:if get_option('pciaccess')
hw/xfree86/meson.build:if get_option('suid_wrapper')
hw/xfree86/meson.build:    xorg_install_dir = get_option('libexecdir')
hw/xfree86/meson.build:    xorg_install_dir = get_option('bindir')
hw/xfree86/meson.build:        join_paths(get_option('prefix'), get_option('bindir'), 'X')))
hw/xfree86/meson.build:if get_option('suid_wrapper')
hw/xfree86/meson.build:        install_dir: get_option('libexecdir'),
hw/xfree86/meson.build:        install_dir: join_paths(get_option('prefix'), get_option('bindir')),
hw/xfree86/meson.build:if get_option('suid_wrapper')
hw/xfree86/common/meson.build:fallback_driver = get_option('fallback_input_driver')
hw/xfree86/common/meson.build:if get_option('pciaccess')
hw/xquartz/meson.build:apple_applications_dir = get_option('apple-applications-dir')
hw/xquartz/meson.build:apple_application_name = get_option('apple-application-name')
hw/xquartz/meson.build:bundle_id_prefix = get_option('bundle-id-prefix')
hw/xquartz/meson.build:xquartz_sparkle_feed_url = get_option('sparkle-feed-url')
hw/xquartz/meson.build:xquartz_sparkle_public_edkey = get_option('sparkle-public-edkey')
hw/xquartz/meson.build:bundle_version_string = get_option('bundle-version-string') # CFBundleShortVersionString
hw/xquartz/meson.build:bundle_version = get_option('bundle-version') # CFBundleVersion
hw/xquartz/meson.build:xquartz_data_dir = join_paths(get_option('prefix'), get_option('datadir'),'X11', 'XQuartz')
hw/xquartz/mach-startup/meson.build:    '-DX11BINDIR="@0@"'.format(join_paths(get_option('prefix'), get_option('bindir'))),
hw/xquartz/pbproxy/meson.build:build_standalone_pbproxy = get_option('xpbproxy')
hw/xwin/meson.build:    install_dir: join_paths(get_option('sysconfdir'), 'X11')
include/meson.build:if get_option('input_thread') == 'false'
include/meson.build:  if not enable_input_thread and get_option('input_thread') == 'true'
include/meson.build:  if host_machine.system() == 'windows' and get_option('input_thread') == 'auto'
include/meson.build:conf_data.set_quoted('PROJECTROOT', get_option('prefix'))
include/meson.build:conf_data.set_quoted('SYSCONFDIR', join_paths(get_option('prefix'), get_option('sysconfdir')))
include/meson.build:conf_data.set_quoted('SUID_WRAPPER_DIR', join_paths(get_option('prefix'), get_option('libexecdir')))
include/meson.build:conf_data.set('LISTEN_TCP', get_option('listen_tcp'))
include/meson.build:conf_data.set('LISTEN_UNIX', get_option('listen_unix'))
include/meson.build:conf_data.set('LISTEN_LOCAL', get_option('listen_local'))
include/meson.build:conf_data.set('HAVE_LIBUNWIND', get_option('libunwind'))
include/meson.build:enable_debugging = get_option('buildtype') == 'debug'
include/meson.build:conf_data.set_quoted('XVENDORNAME', get_option('vendor_name'))
include/meson.build:conf_data.set_quoted('XVENDORNAMESHORT', get_option('vendor_name_short'))
include/meson.build:conf_data.set_quoted('__VENDORDWEBSUPPORT__', get_option('vendor_web'))
include/meson.build:conf_data.set_quoted('BUILDERADDR', get_option('builder_addr'))
include/meson.build:conf_data.set_quoted('BUILDERSTRING', get_option('builder_string'))
include/meson.build:conf_data.set_quoted('XKB_DFLT_RULES', get_option('xkb_default_rules'))
include/meson.build:conf_data.set('XSERVER_LIBPCIACCESS', get_option('pciaccess') ? '1' : false)
include/meson.build:version_data.set_quoted('VENDOR_NAME', get_option('vendor_name'))
include/meson.build:version_data.set_quoted('VENDOR_NAME_SHORT', get_option('vendor_name_short'))
include/meson.build:version_data.set_quoted('VENDOR_WEB', get_option('vendor_web'))
include/meson.build:xkb_data.set_quoted('XKB_DFLT_RULES', get_option('xkb_default_rules'))
include/meson.build:xkb_data.set_quoted('XKB_DFLT_MODEL', get_option('xkb_default_model'))
include/meson.build:xkb_data.set_quoted('XKB_DFLT_LAYOUT', get_option('xkb_default_layout'))
include/meson.build:xkb_data.set_quoted('XKB_DFLT_VARIANT', get_option('xkb_default_variant'))
include/meson.build:xkb_data.set_quoted('XKB_DFLT_OPTIONS', get_option('xkb_default_options'))
include/meson.build:xorg_data.set_quoted('XORG_BIN_DIRECTORY', get_option('bindir'))
include/meson.build:xorg_data.set_quoted('DEFAULT_MODULE_PATH', join_paths(get_option('prefix'), module_dir))
include/meson.build:xorg_data.set_quoted('DEFAULT_LIBRARY_PATH', join_paths(get_option('prefix'), get_option('libdir')))
include/meson.build:xorg_data.set('XSERVER_LIBPCIACCESS', get_option('pciaccess') ? '1' : false)
man/meson.build:manpage_config.set('projectroot', get_option('prefix'))
man/meson.build:manpage_config.set('datadir', join_paths(get_option('prefix'), get_option('datadir')))
man/meson.build:manpage_config.set('mandir', join_paths(get_option('prefix'), get_option('mandir')))
man/meson.build:manpage_config.set('sysconfdir', join_paths(get_option('prefix'), get_option('sysconfdir')))
man/meson.build:manpage_config.set('XKB_DFLT_RULES', get_option('xkb_default_rules'))
man/meson.build:manpage_config.set('XKB_DFLT_MODEL', get_option('xkb_default_model'))
man/meson.build:manpage_config.set('XKB_DFLT_LAYOUT', get_option('xkb_default_layout'))
man/meson.build:manpage_config.set('XKB_DFLT_VARIANT', get_option('xkb_default_variant'))
man/meson.build:manpage_config.set('XKB_DFLT_OPTIONS', get_option('xkb_default_options'))
man/meson.build:# manpage_config.set('suid_wrapper_dir', join_paths(get_option('prefix'), libexecdir))
man/meson.build:manpage_config.set('suid_wrapper_dir', join_paths(get_option('prefix'), 'libexec'))
os/meson.build:if get_option('xdmcp')
os/meson.build:if get_option('xres')
test/meson.build:if get_option('xvfb')
test/meson.build:    if get_option('xephyr') and build_glamor
test/bigreq/meson.build:if get_option('xvfb')
test/bugs/meson.build:if get_option('xvfb')
test/bugs/meson.build:    if xcb_dep.found() and xcb_image_dep.found() and xcb_util_dep.found() and get_option('xvfb') and get_option('xephyr') and build_glamor
test/damage/meson.build:if get_option('xvfb')
test/sync/meson.build:if get_option('xvfb')
